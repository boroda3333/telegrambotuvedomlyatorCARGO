import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, time, timedelta
import pytz
import os
import json
import asyncio
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7952222222:AAHNNBA5OnoQrblwY4BO0BoETb-9jZg_z_g')

# –¢–∞–π–º–∑–æ–Ω–∞ –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
AUTO_REPLY_MESSAGE = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∫–æ–º–ø–∞–Ω–∏–∏!

–ú—ã –æ—Ç–≤–µ—á–∞–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É | c 10:00 –¥–æ 19:00 –ø–æ –ú–°–ö

**—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ**"""

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = {7842709072, 1772492746, 1661202178, 478084322}

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
FLAGS_FILE = "auto_reply_flags.json"
WORK_CHAT_FILE = "work_chat.json"
PENDING_MESSAGES_FILE = "pending_messages.json"
FUNNELS_CONFIG_FILE = "funnels_config.json"
EXCLUDED_USERS_FILE = "excluded_users.json"
FUNNELS_STATE_FILE = "funnels_state.json"
MASTER_NOTIFICATION_FILE = "master_notification.json"

# ========== –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–õ–ê–í–ù–´–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï–ú ==========

class MasterNotificationManager:
    def __init__(self):
        self.data = self.load_data()
        self.last_notification_time = None
        self.notification_cooldown = 900  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(MASTER_NOTIFICATION_FILE):
                with open(MASTER_NOTIFICATION_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return {"message_ids": [], "last_update": None}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open(MASTER_NOTIFICATION_FILE, 'w') as f:
                json.dump(self.data, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def add_message_id(self, message_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫"""
        if "message_ids" not in self.data:
            self.data["message_ids"] = []
        
        self.data["message_ids"].append(message_id)
        self.data["last_update"] = datetime.now(MOSCOW_TZ).isoformat()
        self.save_data()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {message_id}")
    
    def get_message_ids(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.data.get("message_ids", [])
    
    def clear_old_messages(self, keep_last: int = 3):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"""
        if "message_ids" in self.data and len(self.data["message_ids"]) > keep_last:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ keep_last —Å–æ–æ–±—â–µ–Ω–∏–π
            self.data["message_ids"] = self.data["message_ids"][-keep_last:]
            self.save_data()
    
    def should_update(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)"""
        # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if not self.last_notification_time:
            return True
        
        now = datetime.now(MOSCOW_TZ)
        time_diff = now - self.last_notification_time
        
        return time_diff.total_seconds() >= self.notification_cooldown
    
    def update_notification_time(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.last_notification_time = datetime.now(MOSCOW_TZ)
        logger.info(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {self.last_notification_time.strftime('%H:%M:%S')}")

# ========== –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ï–ú –í–û–†–û–ù–û–ö ==========

class FunnelsStateManager:
    def __init__(self):
        self.state = self.load_state()
    
    def load_state(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(FUNNELS_STATE_FILE):
                with open(FUNNELS_STATE_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫: {e}")
        
        return {
            "last_funnel_1_check": None,
            "last_funnel_2_check": None, 
            "last_funnel_3_check": None,
            "funnel_1_messages_processed": [],
            "funnel_2_messages_processed": [],
            "funnel_3_messages_processed": []
        }
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(FUNNELS_STATE_FILE, 'w') as f:
                json.dump(self.state, f, indent=2, default=str)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–æ–Ω–æ–∫: {e}")
    
    def update_last_check(self, funnel_number: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
        self.state[f"last_funnel_{funnel_number}_check"] = datetime.now(MOSCOW_TZ).isoformat()
        self.save_state()
    
    def get_last_check(self, funnel_number: int) -> datetime:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
        timestamp = self.state.get(f"last_funnel_{funnel_number}_check")
        if timestamp:
            return datetime.fromisoformat(timestamp)
        return datetime.now(MOSCOW_TZ) - timedelta(days=1)
    
    def add_processed_message(self, funnel_number: int, message_key: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
        key = f"funnel_{funnel_number}_messages_processed"
        if message_key not in self.state[key]:
            self.state[key].append(message_key)
            self.save_state()
    
    def is_message_processed(self, funnel_number: int, message_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ—Ä–æ–Ω–∫–æ–π"""
        key = f"funnel_{funnel_number}_messages_processed"
        return message_key in self.state[key]
    
    def clear_processed_messages(self, funnel_number: int):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏"""
        key = f"funnel_{funnel_number}_messages_processed"
        self.state[key] = []
        self.save_state()

# ========== –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò ==========

class ExcludedUsersManager:
    def __init__(self):
        self.excluded_users = self.load_excluded_users()
    
    def load_excluded_users(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(EXCLUDED_USERS_FILE):
                with open(EXCLUDED_USERS_FILE, 'r') as f:
                    data = json.load(f)
                    return data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        
        return {
            "user_ids": [433733509, 1661202178, 478084322, 868325393, 1438860417, 879901619, 6107771545, 253353687, 2113096625, 91047831, 7842709072],
            "usernames": []
        }
    
    def save_excluded_users(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(EXCLUDED_USERS_FILE, 'w') as f:
                json.dump(self.excluded_users, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def is_user_excluded(self, user_id: int, username: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º"""
        if user_id in self.excluded_users["user_ids"]:
            return True
        
        if username and username.lower() in [u.lower() for u in self.excluded_users["usernames"]]:
            return True
        
        return False
    
    def add_user_id(self, user_id: int) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        if user_id not in self.excluded_users["user_ids"]:
            self.excluded_users["user_ids"].append(user_id)
            self.save_excluded_users()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ID –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {user_id}")
            return True
        return False
    
    def add_username(self, username: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç username –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        username = username.lstrip('@').lower()
        if username not in [u.lower() for u in self.excluded_users["usernames"]]:
            self.excluded_users["usernames"].append(username)
            self.save_excluded_users()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω username –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: @{username}")
            return True
        return False
    
    def remove_user_id(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        if user_id in self.excluded_users["user_ids"]:
            self.excluded_users["user_ids"].remove(user_id)
            self.save_excluded_users()
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω ID –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {user_id}")
            return True
        return False
    
    def remove_username(self, username: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç username –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        username = username.lstrip('@').lower()
        for u in self.excluded_users["usernames"]:
            if u.lower() == username:
                self.excluded_users["usernames"].remove(u)
                self.save_excluded_users()
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω username –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: @{username}")
                return True
        return False
    
    def get_all_excluded(self) -> Dict[str, List]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self.excluded_users
    
    def clear_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        self.excluded_users = {"user_ids": [], "usernames": []}
        self.save_excluded_users()
        logger.info("‚úÖ –í—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

# ========== –ö–õ–ê–°–°–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–ú–ò ==========

class FunnelsConfig:
    def __init__(self):
        self.funnels = self.load_funnels()
    
    def load_funnels(self) -> Dict[int, int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–æ–Ω–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—è"""
        try:
            if os.path.exists(FUNNELS_CONFIG_FILE):
                with open(FUNNELS_CONFIG_FILE, 'r') as f:
                    data = json.load(f)
                    return {int(k): v for k, v in data.items()}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–æ–∫: {e}")
        
        return {
            1: 60,    # 1 —á–∞—Å
            2: 180,   # 3 —á–∞—Å–∞  
            3: 300    # 5 —á–∞—Å–æ–≤
        }
    
    def save_funnels(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(FUNNELS_CONFIG_FILE, 'w') as f:
                json.dump(self.funnels, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–æ–∫: {e}")
    
    def get_funnels(self) -> Dict[int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–æ–Ω–æ–∫"""
        return self.funnels
    
    def set_funnel_interval(self, funnel_number: int, minutes: int) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏"""
        if funnel_number in [1, 2, 3] and minutes > 0:
            self.funnels[funnel_number] = minutes
            self.save_funnels()
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ {funnel_number}: {minutes} –º–∏–Ω—É—Ç")
            return True
        return False
    
    def get_funnel_interval(self, funnel_number: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏"""
        return self.funnels.get(funnel_number, 0)
    
    def reset_to_default(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.funnels = {1: 60, 2: 180, 3: 300}
        self.save_funnels()
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

class AutoReplyFlags:
    def __init__(self):
        self.flags = self.load_flags()
    
    def load_flags(self) -> Dict[str, bool]:
        try:
            if os.path.exists(FLAGS_FILE):
                with open(FLAGS_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–ª–∞–≥–æ–≤: {e}")
        return {}
    
    def save_flags(self):
        try:
            with open(FLAGS_FILE, 'w') as f:
                json.dump(self.flags, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤: {e}")
    
    def has_replied(self, key: str) -> bool:
        return self.flags.get(key, False)
    
    def set_replied(self, key: str):
        self.flags[key] = True
        self.save_flags()
    
    def clear_replied(self, key: str):
        if key in self.flags:
            del self.flags[key]
            self.save_flags()
    
    def clear_all(self):
        self.flags = {}
        self.save_flags()
    
    def count_flags(self):
        return len(self.flags)

class WorkChatManager:
    def __init__(self):
        self.work_chat_id = self.load_work_chat()
    
    def load_work_chat(self):
        try:
            if os.path.exists(WORK_CHAT_FILE):
                with open(WORK_CHAT_FILE, 'r') as f:
                    data = json.load(f)
                    return data.get('work_chat_id')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞: {e}")
        return None
    
    def save_work_chat(self, chat_id):
        try:
            with open(WORK_CHAT_FILE, 'w') as f:
                json.dump({'work_chat_id': chat_id}, f)
            self.work_chat_id = chat_id
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞: {e}")
            return False
    
    def get_work_chat_id(self):
        return self.work_chat_id
    
    def is_work_chat_set(self):
        return self.work_chat_id is not None

class PendingMessagesManager:
    def __init__(self, funnels_config: FunnelsConfig):
        self.pending_messages = self.load_pending_messages()
        self.funnels_config = funnels_config
    
    def load_pending_messages(self) -> Dict[str, Any]:
        try:
            if os.path.exists(PENDING_MESSAGES_FILE):
                with open(PENDING_MESSAGES_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {}
    
    def save_pending_messages(self):
        try:
            with open(PENDING_MESSAGES_FILE, 'w') as f:
                json.dump(self.pending_messages, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def add_message(self, chat_id: int, user_id: int, message_text: str, message_id: int, chat_title: str = None, username: str = None, first_name: str = None):
        key = f"{chat_id}_{user_id}_{message_id}_{int(datetime.now().timestamp())}"
        
        if not message_text:
            message_text = "[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
        
        self.pending_messages[key] = {
            'chat_id': chat_id,
            'user_id': user_id,
            'message_text': message_text,
            'message_id': message_id,
            'chat_title': chat_title,
            'username': username,
            'first_name': first_name,
            'timestamp': datetime.now(MOSCOW_TZ).isoformat(),
            'funnels_sent': [],
            'current_funnel': 0,
            'message_key': key
        }
        self.save_pending_messages()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {key}")
    
    def remove_message_by_key(self, key: str):
        if key in self.pending_messages:
            del self.pending_messages[key]
            self.save_pending_messages()
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {key}")
            return True
        return False
    
    def remove_all_chat_messages(self, chat_id: int, user_id: int = None):
        keys_to_remove = []
        for key, message in self.pending_messages.items():
            if message['chat_id'] == chat_id:
                if user_id is None or message['user_id'] == user_id:
                    keys_to_remove.append(key)
        
        for key in keys_to_remove:
            del self.pending_messages[key]
        
        if keys_to_remove:
            self.save_pending_messages()
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(keys_to_remove)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}")
            return len(keys_to_remove)
        return 0
    
    def get_all_pending_messages(self) -> List[Dict[str, Any]]:
        return list(self.pending_messages.values())
    
    def mark_funnel_sent(self, message_key: str, funnel_number: int):
        if message_key in self.pending_messages:
            if funnel_number not in self.pending_messages[message_key]['funnels_sent']:
                self.pending_messages[message_key]['funnels_sent'].append(funnel_number)
                self.pending_messages[message_key]['current_funnel'] = funnel_number
                self.save_pending_messages()
    
    def find_messages_by_chat(self, chat_id: int) -> List[Dict[str, Any]]:
        result = []
        for message in self.pending_messages.values():
            if message['chat_id'] == chat_id:
                result.append(message)
        return result
    
    def get_messages_for_funnel(self, funnel_number: int, funnels_state: FunnelsStateManager) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏ - –°–¢–†–û–ì–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨"""
        result = []
        now = datetime.now(MOSCOW_TZ)
        FUNNELS = self.funnels_config.get_funnels()
        funnel_minutes = FUNNELS[funnel_number]
        
        for message_key, message in self.pending_messages.items():
            if funnels_state.is_message_processed(funnel_number, message_key):
                continue
                
            timestamp = datetime.fromisoformat(message['timestamp'])
            time_diff = now - timestamp
            minutes_passed = int(time_diff.total_seconds() / 60)
            
            current_funnel = message.get('current_funnel', 0)
            funnels_sent = message.get('funnels_sent', [])
            
            # –°–¢–†–û–ì–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –í–û–†–û–ù–û–ö
            if funnel_number == 1:
                # –í–æ—Ä–æ–Ω–∫–∞ 1: –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±–æ–ª—å—à–µ 1 —á–∞—Å–∞ –∏ –Ω–µ –±—ã—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –≤–æ—Ä–æ–Ω–∫–∞—Ö
                if (minutes_passed >= funnel_minutes and 
                    current_funnel == 0 and 
                    funnel_number not in funnels_sent):
                    message['message_key'] = message_key
                    message['minutes_passed'] = minutes_passed
                    result.append(message)
                    
            elif funnel_number == 2:
                # –í–æ—Ä–æ–Ω–∫–∞ 2: –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±–æ–ª—å—à–µ 3 —á–∞—Å–æ–≤ –ò –≤–æ—Ä–æ–Ω–∫–∞ 1 —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
                if (minutes_passed >= funnel_minutes and 
                    1 in funnels_sent and 
                    current_funnel == 1 and
                    funnel_number not in funnels_sent):
                    message['message_key'] = message_key
                    message['minutes_passed'] = minutes_passed
                    result.append(message)
                    
            elif funnel_number == 3:
                # –í–æ—Ä–æ–Ω–∫–∞ 3: –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±–æ–ª—å—à–µ 5 —á–∞—Å–æ–≤ –ò –≤–æ—Ä–æ–Ω–∫–∞ 2 —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
                if (minutes_passed >= funnel_minutes and 
                    2 in funnels_sent and 
                    current_funnel == 2 and
                    funnel_number not in funnels_sent):
                    message['message_key'] = message_key
                    message['minutes_passed'] = minutes_passed
                    result.append(message)
        
        return result
    
    def update_funnel_statuses(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ - –°–¢–†–û–ì–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨"""
        updated_count = 0
        now = datetime.now(MOSCOW_TZ)
        FUNNELS = self.funnels_config.get_funnels()
        
        for message_key, message in self.pending_messages.items():
            timestamp = datetime.fromisoformat(message['timestamp'])
            time_diff = now - timestamp
            minutes_passed = int(time_diff.total_seconds() / 60)
            
            current_funnel = message.get('current_funnel', 0)
            funnels_sent = message.get('funnels_sent', [])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–æ—Ä–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ—Ä–æ–Ω–æ–∫
            next_funnel = current_funnel
            
            if current_funnel == 0 and minutes_passed >= FUNNELS[1]:
                next_funnel = 1
            elif current_funnel == 1 and minutes_passed >= FUNNELS[2]:
                next_funnel = 2
            elif current_funnel == 2 and minutes_passed >= FUNNELS[3]:
                next_funnel = 3
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ—Ä–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if next_funnel != current_funnel:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                for funnel_num in range(1, next_funnel):
                    if funnel_num not in funnels_sent:
                        funnels_sent.append(funnel_num)
                
                self.pending_messages[message_key]['current_funnel'] = next_funnel
                self.pending_messages[message_key]['funnels_sent'] = funnels_sent
                updated_count += 1
                logger.info(f"üîÑ –°–æ–æ–±—â–µ–Ω–∏–µ {message_key} –ø–µ—Ä–µ—à–ª–æ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ {current_funnel} –≤ –≤–æ—Ä–æ–Ω–∫—É {next_funnel} ({minutes_passed} –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ)")
        
        if updated_count > 0:
            self.save_pending_messages()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫: {updated_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return updated_count
    
    def get_all_messages_older_than(self, minutes_threshold: int) -> List[Dict[str, Any]]:
        result = []
        now = datetime.now(MOSCOW_TZ)
        
        for message_key, message in self.pending_messages.items():
            timestamp = datetime.fromisoformat(message['timestamp'])
            time_diff = now - timestamp
            minutes_passed = int(time_diff.total_seconds() / 60)
            
            if minutes_passed >= minutes_threshold:
                message['message_key'] = message_key
                message['minutes_passed'] = minutes_passed
                result.append(message)
        
        return result
    
    def clear_all(self):
        count = len(self.pending_messages)
        self.pending_messages = {}
        self.save_pending_messages()
        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({count} —à—Ç.)")
        return count

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–´ ==========

funnels_config = FunnelsConfig()
flags_manager = AutoReplyFlags()
work_chat_manager = WorkChatManager()
pending_messages_manager = PendingMessagesManager(funnels_config)
excluded_users_manager = ExcludedUsersManager()
funnels_state_manager = FunnelsStateManager()
master_notification_manager = MasterNotificationManager()

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def is_manager(user_id: int, username: str = None) -> bool:
    return excluded_users_manager.is_user_excluded(user_id, username)

def is_excluded_user(user_id: int) -> bool:
    return excluded_users_manager.is_user_excluded(user_id)

def is_working_hours():
    now = datetime.now(MOSCOW_TZ)
    current_time = now.time()
    if current_time >= time(10, 0) and current_time <= time(19, 0):
        return True
    return False

def should_respond_to_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if not update or not update.message:
        return False
    
    if update.message.from_user.id == context.bot.id:
        return False
        
    if is_excluded_user(update.message.from_user.id):
        return False
        
    if update.message.new_chat_members or update.message.left_chat_member:
        return False
        
    if update.message.pinned_message:
        return False
        
    if update.edited_message:
        return False
        
    if update.message.text and update.message.text.startswith('/'):
        return False
        
    if update.message.text and len(update.message.text.strip()) < 1:
        return False
        
    return True

def get_chat_display_name(chat_data: Dict[str, Any]) -> str:
    chat_title = chat_data.get('chat_title')
    if chat_title:
        return chat_title
    else:
        return f"–ß–∞—Ç {chat_data['chat_id']}"

def get_funnel_emoji(funnel_number: int) -> str:
    emojis = {1: "üü°", 2: "üü†", 3: "üî¥"}
    return emojis.get(funnel_number, "‚ö™")

def format_time_ago(timestamp: str) -> str:
    message_time = datetime.fromisoformat(timestamp)
    now = datetime.now(MOSCOW_TZ)
    time_diff = now - message_time
    
    total_minutes = int(time_diff.total_seconds() / 60)
    hours = total_minutes // 60
    minutes = total_minutes % 60
    
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    else:
        return f"{minutes}–º"

def minutes_to_hours_text(minutes: int) -> str:
    hours = minutes // 60
    if hours == 1:
        return "1 –ß–ê–°"
    elif hours == 3:
        return "3 –ß–ê–°–ê"
    elif hours == 5:
        return "5 –ß–ê–°–û–í"
    else:
        return f"{hours} –ß–ê–°–û–í"

# ========== –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–û–†–û–ù–û–ö ==========

async def update_message_funnel_statuses():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –°–¢–†–û–ì–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨"""
    logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫...")
    return pending_messages_manager.update_funnel_statuses()

async def mark_messages_as_processed():
    """–ü–æ–º–µ—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏—Ö –≤–æ—Ä–æ–Ω–∫–∞—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"""
    processed_count = 0
    
    # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ—Ä–æ–Ω–∫–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    for funnel_number in [1, 2, 3]:
        messages = pending_messages_manager.get_messages_for_funnel(funnel_number, funnels_state_manager)
        for message in messages:
            message_key = message.get('message_key')
            if message_key:
                # –ü–æ–º–µ—á–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                pending_messages_manager.mark_funnel_sent(message_key, funnel_number)
                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –¥–ª—è —ç—Ç–æ–π –≤–æ—Ä–æ–Ω–∫–∏
                funnels_state_manager.add_processed_message(funnel_number, message_key)
                processed_count += 1
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_key} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤ –≤–æ—Ä–æ–Ω–∫–µ {funnel_number}")
    
    if processed_count > 0:
        logger.info(f"‚úÖ –ü–æ–º–µ—á–µ–Ω–æ {processed_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ")
    
    return processed_count

# ========== –°–ò–°–¢–ï–ú–ê –ï–î–ò–ù–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==========

def create_master_notification_text() -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –µ–¥–∏–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –≤–æ—Ä–æ–Ω–∫–∞–º–∏"""
    FUNNELS = funnels_config.get_funnels()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ—Ä–æ–Ω–∫–∏
    funnel_1_messages = pending_messages_manager.get_messages_for_funnel(1, funnels_state_manager)
    funnel_2_messages = pending_messages_manager.get_messages_for_funnel(2, funnels_state_manager)
    funnel_3_messages = pending_messages_manager.get_messages_for_funnel(3, funnels_state_manager)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ—Ä–æ–Ω–∫–∏
    funnel_1_chats = {}
    funnel_2_chats = {}
    funnel_3_chats = {}
    
    for msg in funnel_1_messages:
        chat_id = msg['chat_id']
        if chat_id not in funnel_1_chats:
            funnel_1_chats[chat_id] = {
                'chat_info': msg,
                'message_count': 0,
                'oldest_time': msg['timestamp']
            }
        funnel_1_chats[chat_id]['message_count'] += 1
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è
        if msg['timestamp'] < funnel_1_chats[chat_id]['oldest_time']:
            funnel_1_chats[chat_id]['oldest_time'] = msg['timestamp']
    
    for msg in funnel_2_messages:
        chat_id = msg['chat_id']
        if chat_id not in funnel_2_chats:
            funnel_2_chats[chat_id] = {
                'chat_info': msg,
                'message_count': 0,
                'oldest_time': msg['timestamp']
            }
        funnel_2_chats[chat_id]['message_count'] += 1
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è
        if msg['timestamp'] < funnel_2_chats[chat_id]['oldest_time']:
            funnel_2_chats[chat_id]['oldest_time'] = msg['timestamp']
    
    for msg in funnel_3_messages:
        chat_id = msg['chat_id']
        if chat_id not in funnel_3_chats:
            funnel_3_chats[chat_id] = {
                'chat_info': msg,
                'message_count': 0,
                'oldest_time': msg['timestamp']
            }
        funnel_3_chats[chat_id]['message_count'] += 1
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è
        if msg['timestamp'] < funnel_3_chats[chat_id]['oldest_time']:
            funnel_3_chats[chat_id]['oldest_time'] = msg['timestamp']
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_text = "üìä **–û–ë–ó–û–† –ù–ï–û–¢–í–ï–ß–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô**\n\n"
    
    # –í–æ—Ä–æ–Ω–∫–∞ 1
    notification_text += f"üü° {minutes_to_hours_text(FUNNELS[1])} –±–µ–∑ –æ—Ç–≤–µ—Ç–∞\n"
    if funnel_1_chats:
        for chat_id, chat_data in funnel_1_chats.items():
            chat_display = get_chat_display_name(chat_data['chat_info'])
            message_count = chat_data['message_count']
            time_ago = format_time_ago(chat_data['oldest_time'])
            notification_text += f"  ‚Ä¢ {chat_display} ({message_count} —Å–æ–æ–±—â., {time_ago} –Ω–∞–∑–∞–¥)\n"
    else:
        notification_text += "  –¢–∞–∫–∏—Ö –Ω–µ—Ç\n"
    notification_text += "\n"
    
    # –í–æ—Ä–æ–Ω–∫–∞ 2
    notification_text += f"üü† {minutes_to_hours_text(FUNNELS[2])} –±–µ–∑ –æ—Ç–≤–µ—Ç–∞\n"
    if funnel_2_chats:
        for chat_id, chat_data in funnel_2_chats.items():
            chat_display = get_chat_display_name(chat_data['chat_info'])
            message_count = chat_data['message_count']
            time_ago = format_time_ago(chat_data['oldest_time'])
            notification_text += f"  ‚Ä¢ {chat_display} ({message_count} —Å–æ–æ–±—â., {time_ago} –Ω–∞–∑–∞–¥)\n"
    else:
        notification_text += "  –¢–∞–∫–∏—Ö –Ω–µ—Ç\n"
    notification_text += "\n"
    
    # –í–æ—Ä–æ–Ω–∫–∞ 3
    notification_text += f"üî¥ –ë–û–õ–ï–ï {minutes_to_hours_text(FUNNELS[3])} –±–µ–∑ –æ—Ç–≤–µ—Ç–∞\n"
    if funnel_3_chats:
        for chat_id, chat_data in funnel_3_chats.items():
            chat_display = get_chat_display_name(chat_data['chat_info'])
            message_count = chat_data['message_count']
            time_ago = format_time_ago(chat_data['oldest_time'])
            notification_text += f"  ‚Ä¢ {chat_display} ({message_count} —Å–æ–æ–±—â., {time_ago} –Ω–∞–∑–∞–¥)\n"
    else:
        notification_text += "  –¢–∞–∫–∏—Ö –Ω–µ—Ç\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_messages = len(pending_messages_manager.get_all_pending_messages())
    total_chats = len(set(msg['chat_id'] for msg in pending_messages_manager.get_all_pending_messages()))
    
    notification_text += f"\nüìà **–ò–¢–û–ì–û:** {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {total_chats} —á–∞—Ç–∞—Ö"
    notification_text += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now(MOSCOW_TZ).strftime('%H:%M:%S')}"
    
    return notification_text

async def delete_old_notifications(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    work_chat_id = work_chat_manager.get_work_chat_id()
    if not work_chat_id:
        return
    
    try:
        message_ids = master_notification_manager.get_message_ids()
        for message_id in message_ids:
            try:
                await context.bot.delete_message(
                    chat_id=work_chat_id,
                    message_id=message_id
                )
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {message_id}")
            except Exception as e:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        master_notification_manager.data["message_ids"] = []
        master_notification_manager.save_data()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def send_new_master_notification(context: ContextTypes.DEFAULT_TYPE, force: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ)"""
    work_chat_id = work_chat_manager.get_work_chat_id()
    if not work_chat_id:
        logger.error("‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Ä–∞–±–æ—á–∏–π —á–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown, –µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    if not force and not master_notification_manager.should_update():
        logger.info("‚è≥ Cooldown: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (–µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ 15 –º–∏–Ω—É—Ç)")
        return False
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await delete_old_notifications(context)
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        notification_text = create_master_notification_text()
        
        sent_message = await context.bot.send_message(
            chat_id=work_chat_id,
            text=notification_text,
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        master_notification_manager.add_message_id(sent_message.message_id)
        
        # –ü–û–ú–ï–ß–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø –ö–ê–ö –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ü–û–°–õ–ï –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
        processed_count = await mark_messages_as_processed()
        logger.info(f"üìù –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω–æ {processed_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        master_notification_manager.update_notification_time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
        master_notification_manager.clear_old_messages(keep_last=3)
        
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –µ–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def check_and_send_new_notification(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤"""
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
    
    # –°–ù–ê–ß–ê–õ–ê –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–°–´ –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô
    updated_count = await update_message_funnel_statuses()
    if updated_count > 0:
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    # –ü–û–¢–û–ú –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
    await send_new_master_notification(context)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–í–ï–¢–û–í –ú–ï–ù–ï–î–ñ–ï–†–ê ==========

async def handle_manager_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    if not update or not update.message:
        return
        
    username = update.message.from_user.username
    if not is_manager(update.message.from_user.id, username):
        return
        
    if update.message.text and update.message.text.startswith('/'):
        return
    
    chat_id = update.message.chat.id
    logger.info(f"üîç –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –≤ —á–∞—Ç–µ {chat_id}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ pending –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    removed_count = pending_messages_manager.remove_all_chat_messages(chat_id)
    
    if removed_count > 0:
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id} –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        await send_new_master_notification(context, force=True)

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω!\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "/funnels - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫\n"
        "/pending - —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö\n"
        "/managers - —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/update_notification - –æ–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "/force_update_funnels - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Ä–æ–Ω–∫–∏\n"
        "/debug_funnels - –æ—Ç–ª–∞–¥–∫–∞ –≤–æ—Ä–æ–Ω–æ–∫\n\n"
        "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏:**\n"
        "/add_exception - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ\n"
        "/remove_exception - —É–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ\n"
        "/list_exceptions - —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π\n"
        "/clear_exceptions - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    help_text = """
üìñ **–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú –ë–û–¢–ê**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∞–º–∏:**
/funnels - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫
/set_funnel_1 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 1-–π –≤–æ—Ä–æ–Ω–∫–∏
/set_funnel_2 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 2-–π –≤–æ—Ä–æ–Ω–∫–∏  
/set_funnel_3 <–º–∏–Ω—É—Ç—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª 3-–π –≤–æ—Ä–æ–Ω–∫–∏
/reset_funnels - —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫
/force_update_funnels - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫
/debug_funnels - –æ—Ç–ª–∞–¥–∫–∞ –≤–æ—Ä–æ–Ω–æ–∫

**–†–∞–±–æ—á–∏–π —á–∞—Ç:**
/set_work_chat - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ —Ä–∞–±–æ—á–∏–π (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:**
/pending - —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
/clear_chat - –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
/clear_all - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏:**
/add_exception <ID/@username> - –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
/remove_exception <ID/@username> - —É–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
/list_exceptions - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
/clear_exceptions - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

**–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
/update_notification - –æ–±–Ω–æ–≤–∏—Ç—å –µ–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/managers - —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

üìù **–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –≤–æ—Ä–æ–Ω–æ–∫:**
üü° –í–æ—Ä–æ–Ω–∫–∞ 1: —á–µ—Ä–µ–∑ 1 —á–∞—Å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
üü† –í–æ—Ä–æ–Ω–∫–∞ 2: —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–æ—Ä–æ–Ω–∫–∏ 1)
üî¥ –í–æ—Ä–æ–Ω–∫–∞ 3: —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–æ—Ä–æ–Ω–∫–∏ 2)
**–°–¢–†–û–ì–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨** - —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—Å–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    FUNNELS = funnels_config.get_funnels()
    now = datetime.now(MOSCOW_TZ)
    excluded_users = excluded_users_manager.get_all_excluded()
    total_excluded = len(excluded_users["user_ids"]) + len(excluded_users["usernames"])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
    funnel_1_count = len(pending_messages_manager.get_messages_for_funnel(1, funnels_state_manager))
    funnel_2_count = len(pending_messages_manager.get_messages_for_funnel(2, funnels_state_manager))
    funnel_3_count = len(pending_messages_manager.get_messages_for_funnel(3, funnels_state_manager))
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    last_notification = master_notification_manager.last_notification_time
    last_notification_str = last_notification.strftime('%H:%M:%S') if last_notification else "–ù–∏–∫–æ–≥–¥–∞"
    
    status_text = f"""
üìä **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´**

‚è∞ **–í—Ä–µ–º—è:** {now.strftime('%d.%m.%Y %H:%M:%S')}
üïê **–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:** {'‚úÖ –î–ê' if is_working_hours() else '‚ùå –ù–ï–¢'}

üìã **–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:** {len(pending_messages_manager.get_all_pending_messages())}
üö© **–§–ª–∞–≥–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤:** {flags_manager.count_flags()}
üí¨ **–†–∞–±–æ—á–∏–π —á–∞—Ç:** {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if work_chat_manager.is_work_chat_set() else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üì¢ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:** {last_notification_str}

‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –í–û–†–û–ù–û–ö:**
üü° –í–æ—Ä–æ–Ω–∫–∞ 1: {FUNNELS[1]} –º–∏–Ω ({minutes_to_hours_text(FUNNELS[1])}) - {funnel_1_count} —Å–æ–æ–±—â.
üü† –í–æ—Ä–æ–Ω–∫–∞ 2: {FUNNELS[2]} –º–∏–Ω ({minutes_to_hours_text(FUNNELS[2])}) - {funnel_2_count} —Å–æ–æ–±—â.
üî¥ –í–æ—Ä–æ–Ω–∫–∞ 3: {FUNNELS[3]} –º–∏–Ω ({minutes_to_hours_text(FUNNELS[3])}) - {funnel_3_count} —Å–æ–æ–±—â.

üë• **–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:** {total_excluded} ({len(excluded_users["user_ids"])} ID + {len(excluded_users["usernames"])} username)

üîÑ **–õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
‚è≥ **Cooldown:** {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if not master_notification_manager.should_update() else '‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å'}
üîí **–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ‚úÖ –°—Ç—Ä–æ–≥–∞—è (1‚Üí2‚Üí3)
    """
    
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def funnels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    FUNNELS = funnels_config.get_funnels()
    
    funnels_text = f"""
‚öôÔ∏è **–¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –í–û–†–û–ù–û–ö**

üü° **–í–æ—Ä–æ–Ω–∫–∞ 1 (–Ω–∞—á–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ):**
   - –ò–Ω—Ç–µ—Ä–≤–∞–ª: {FUNNELS[1]} –º–∏–Ω—É—Ç ({minutes_to_hours_text(FUNNELS[1])})
   - –ö–æ–º–∞–Ω–¥–∞: `/set_funnel_1 <–º–∏–Ω—É—Ç—ã>`

üü† **–í–æ—Ä–æ–Ω–∫–∞ 2 (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ):**
   - –ò–Ω—Ç–µ—Ä–≤–∞–ª: {FUNNELS[2]} –º–∏–Ω—É—Ç ({minutes_to_hours_text(FUNNELS[2])})
   - –ö–æ–º–∞–Ω–¥–∞: `/set_funnel_2 <–º–∏–Ω—É—Ç—ã>`

üî¥ **–í–æ—Ä–æ–Ω–∫–∞ 3 (—Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ):**
   - –ò–Ω—Ç–µ—Ä–≤–∞–ª: {FUNNELS[3]} –º–∏–Ω—É—Ç ({minutes_to_hours_text(FUNNELS[3])})
   - –ö–æ–º–∞–Ω–¥–∞: `/set_funnel_3 <–º–∏–Ω—É—Ç—ã>`

üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: `/reset_funnels`
üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: `/force_update_funnels`
üêõ –û—Ç–ª–∞–¥–∫–∞: `/debug_funnels`

üìù **–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:**
–ï–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
**–°–¢–ê–†–û–ï –£–î–ê–õ–Ø–ï–¢–°–Ø, –û–¢–ü–†–ê–í–õ–Ø–ï–¢–°–Ø –ù–û–í–û–ï**
**COOLDOWN 15 –ú–ò–ù–£–¢** - –∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
**–°–¢–†–û–ì–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨** - —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤—Å–µ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    """
    
    await update.message.reply_text(funnels_text, parse_mode='Markdown')

async def set_funnel_1_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_funnel_1 <–º–∏–Ω—É—Ç—ã>")
        return
    
    minutes = int(context.args[0])
    if minutes <= 0:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    
    if funnels_config.set_funnel_interval(1, minutes):
        await update.message.reply_text(f"‚úÖ –í–æ—Ä–æ–Ω–∫–∞ 1 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç ({minutes_to_hours_text(minutes)})")
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏ 1 –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤–æ—Ä–æ–Ω–∫–∏")

async def set_funnel_2_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_funnel_2 <–º–∏–Ω—É—Ç—ã>")
        return
    
    minutes = int(context.args[0])
    if minutes <= 0:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    
    if funnels_config.set_funnel_interval(2, minutes):
        await update.message.reply_text(f"‚úÖ –í–æ—Ä–æ–Ω–∫–∞ 2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç ({minutes_to_hours_text(minutes)})")
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏ 2 –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤–æ—Ä–æ–Ω–∫–∏")

async def set_funnel_3_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_funnel_3 <–º–∏–Ω—É—Ç—ã>")
        return
    
    minutes = int(context.args[0])
    if minutes <= 0:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    
    if funnels_config.set_funnel_interval(3, minutes):
        await update.message.reply_text(f"‚úÖ –í–æ—Ä–æ–Ω–∫–∞ 3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç ({minutes_to_hours_text(minutes)})")
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏ 3 –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤–æ—Ä–æ–Ω–∫–∏")

async def reset_funnels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    funnels_config.reset_to_default()
    await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã")

async def force_update_funnels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫...")
    
    updated_count = await update_message_funnel_statuses()
    
    if updated_count > 0:
        await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫: {updated_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await send_new_master_notification(context, force=True)
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–æ–Ω–æ–∫")

async def debug_funnels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ—Ä–æ–Ω–∫–∏
    FUNNELS = funnels_config.get_funnels()
    funnel_1_messages = pending_messages_manager.get_messages_for_funnel(1, funnels_state_manager)
    funnel_2_messages = pending_messages_manager.get_messages_for_funnel(2, funnels_state_manager)
    funnel_3_messages = pending_messages_manager.get_messages_for_funnel(3, funnels_state_manager)
    
    debug_text = "üêõ **–û–¢–õ–ê–î–ö–ê –í–û–†–û–ù–û–ö**\n\n"
    
    debug_text += f"üü° –í–æ—Ä–æ–Ω–∫–∞ 1 ({FUNNELS[1]} –º–∏–Ω): {len(funnel_1_messages)} —Å–æ–æ–±—â.\n"
    for msg in funnel_1_messages:
        chat_display = get_chat_display_name(msg)
        time_ago = format_time_ago(msg['timestamp'])
        debug_text += f"   - {chat_display} ({time_ago} –Ω–∞–∑–∞–¥)\n"
        debug_text += f"     –¢–µ–∫—Å—Ç: {msg['message_text'][:50]}...\n"
        debug_text += f"     current_funnel: {msg.get('current_funnel', 0)}, funnels_sent: {msg.get('funnels_sent', [])}\n"
    
    debug_text += f"\nüü† –í–æ—Ä–æ–Ω–∫–∞ 2 ({FUNNELS[2]} –º–∏–Ω): {len(funnel_2_messages)} —Å–æ–æ–±—â.\n"
    for msg in funnel_2_messages:
        chat_display = get_chat_display_name(msg)
        time_ago = format_time_ago(msg['timestamp'])
        debug_text += f"   - {chat_display} ({time_ago} –Ω–∞–∑–∞–¥)\n"
        debug_text += f"     –¢–µ–∫—Å—Ç: {msg['message_text'][:50]}...\n"
        debug_text += f"     current_funnel: {msg.get('current_funnel', 0)}, funnels_sent: {msg.get('funnels_sent', [])}\n"
    
    debug_text += f"\nüî¥ –í–æ—Ä–æ–Ω–∫–∞ 3 ({FUNNELS[3]} –º–∏–Ω): {len(funnel_3_messages)} —Å–æ–æ–±—â.\n"
    for msg in funnel_3_messages:
        chat_display = get_chat_display_name(msg)
        time_ago = format_time_ago(msg['timestamp'])
        debug_text += f"   - {chat_display} ({time_ago} –Ω–∞–∑–∞–¥)\n"
        debug_text += f"     –¢–µ–∫—Å—Ç: {msg['message_text'][:50]}...\n"
        debug_text += f"     current_funnel: {msg.get('current_funnel', 0)}, funnels_sent: {msg.get('funnels_sent', [])}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    debug_text += f"\nüìä –°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
    for funnel_num in [1, 2, 3]:
        processed_count = len(funnels_state_manager.state.get(f"funnel_{funnel_num}_messages_processed", []))
        debug_text += f"   –í–æ—Ä–æ–Ω–∫–∞ {funnel_num}: {processed_count} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ pending —Å–æ–æ–±—â–µ–Ω–∏—è
    all_pending = pending_messages_manager.get_all_pending_messages()
    debug_text += f"\nüìã –í—Å–µ–≥–æ –≤ pending: {len(all_pending)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    for msg in all_pending:
        chat_display = get_chat_display_name(msg)
        time_ago = format_time_ago(msg['timestamp'])
        debug_text += f"   - {chat_display} ({time_ago} –Ω–∞–∑–∞–¥): current_funnel={msg.get('current_funnel', 0)}, funnels_sent={msg.get('funnels_sent', [])}\n"
    
    if len(debug_text) > 4000:
        debug_text = debug_text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
    
    await update.message.reply_text(debug_text, parse_mode='Markdown')

async def update_notification_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –µ–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
    success = await send_new_master_notification(context, force=True)
    
    if success:
        await update.message.reply_text("‚úÖ –ï–¥–∏–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def set_work_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    chat_id = update.message.chat.id
    if work_chat_manager.save_work_chat(chat_id):
        await update.message.reply_text(f"‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ä–∞–±–æ—á–∏–π (ID: {chat_id})")
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π —á–∞—Ç (—Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        await send_new_master_notification(context, force=True)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞")

async def managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    excluded_users = excluded_users_manager.get_all_excluded()
    
    if not excluded_users["user_ids"] and not excluded_users["usernames"]:
        await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—É—Å—Ç")
        return
    
    text = "üë• **–°–ü–ò–°–û–ö –ú–ï–ù–ï–î–ñ–ï–†–û–í**\n\n"
    
    if excluded_users["user_ids"]:
        text += "üÜî **–ü–æ ID:**\n"
        for i, user_id in enumerate(excluded_users["user_ids"], 1):
            text += f"{i}. `{user_id}`\n"
        text += "\n"
    
    if excluded_users["usernames"]:
        text += "üë§ **–ü–æ username:**\n"
        for i, username in enumerate(excluded_users["usernames"], 1):
            text += f"{i}. `@{username}`\n"
    
    text += f"\nüìä –í—Å–µ–≥–æ: {len(excluded_users['user_ids'])} ID + {len(excluded_users['usernames'])} username"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    all_pending = pending_messages_manager.get_all_pending_messages()
    excluded_users = excluded_users_manager.get_all_excluded()
    total_excluded = len(excluded_users["user_ids"]) + len(excluded_users["usernames"])
    
    now = datetime.now(MOSCOW_TZ)
    time_stats = {"–º–µ–Ω–µ–µ 1 —á–∞—Å–∞": 0, "1-3 —á–∞—Å–∞": 0, "3-6 —á–∞—Å–æ–≤": 0, "–±–æ–ª–µ–µ 6 —á–∞—Å–æ–≤": 0}
    
    for message in all_pending:
        timestamp = datetime.fromisoformat(message['timestamp'])
        time_diff = now - timestamp
        hours_passed = time_diff.total_seconds() / 3600
        
        if hours_passed < 1:
            time_stats["–º–µ–Ω–µ–µ 1 —á–∞—Å–∞"] += 1
        elif hours_passed < 3:
            time_stats["1-3 —á–∞—Å–∞"] += 1
        elif hours_passed < 6:
            time_stats["3-6 —á–∞—Å–æ–≤"] += 1
        else:
            time_stats["–±–æ–ª–µ–µ 6 —á–∞—Å–æ–≤"] += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
    funnel_1_count = len(pending_messages_manager.get_messages_for_funnel(1, funnels_state_manager))
    funnel_2_count = len(pending_messages_manager.get_messages_for_funnel(2, funnels_state_manager))
    funnel_3_count = len(pending_messages_manager.get_messages_for_funnel(3, funnels_state_manager))
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    last_notification = master_notification_manager.last_notification_time
    last_notification_str = last_notification.strftime('%H:%M:%S') if last_notification else "–ù–∏–∫–æ–≥–¥–∞"
    
    stats_text = f"""
üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
   - –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_pending)}
   - –§–ª–∞–≥–æ–≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤: {flags_manager.count_flags()}
   - –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_excluded} ({len(excluded_users["user_ids"])} ID + {len(excluded_users["usernames"])} username)
   - –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {last_notification_str}

‚öôÔ∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–æ–∫:**
   - üü° –í–æ—Ä–æ–Ω–∫–∞ 1: {funnel_1_count} —Å–æ–æ–±—â–µ–Ω–∏–π
   - üü† –í–æ—Ä–æ–Ω–∫–∞ 2: {funnel_2_count} —Å–æ–æ–±—â–µ–Ω–∏–π  
   - üî¥ –í–æ—Ä–æ–Ω–∫–∞ 3: {funnel_3_count} —Å–æ–æ–±—â–µ–Ω–∏–π

‚è± **–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:**
   - –ú–µ–Ω–µ–µ 1 —á–∞—Å–∞: {time_stats['–º–µ–Ω–µ–µ 1 —á–∞—Å–∞']}
   - 1-3 —á–∞—Å–∞: {time_stats['1-3 —á–∞—Å–∞']}
   - 3-6 —á–∞—Å–æ–≤: {time_stats['3-6 —á–∞—Å–æ–≤']}
   - –ë–æ–ª–µ–µ 6 —á–∞—Å–æ–≤: {time_stats['–±–æ–ª–µ–µ 6 —á–∞—Å–æ–≤']}

üí¨ **–†–∞–±–æ—á–∏–π —á–∞—Ç:** {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if work_chat_manager.is_work_chat_set() else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üîÑ **–õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
‚è≥ **Cooldown:** {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if not master_notification_manager.should_update() else '‚ùå –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å'}
üîí **–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ‚úÖ –°—Ç—Ä–æ–≥–∞—è (1‚Üí2‚Üí3)
üïê **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {now.strftime('%H:%M:%S')}
    """
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    all_pending = pending_messages_manager.get_all_pending_messages()
    
    if not all_pending:
        await update.message.reply_text("‚úÖ –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–æ–Ω–æ–∫
    FUNNELS = funnels_config.get_funnels()
    funnel_1_count = len(pending_messages_manager.get_messages_for_funnel(1, funnels_state_manager))
    funnel_2_count = len(pending_messages_manager.get_messages_for_funnel(2, funnels_state_manager))
    funnel_3_count = len(pending_messages_manager.get_messages_for_funnel(3, funnels_state_manager))
    
    debug_info = f"\nüîç **–û–¢–õ–ê–î–ö–ê –í–û–†–û–ù–û–ö:**\n"
    debug_info += f"üü° –í–æ—Ä–æ–Ω–∫–∞ 1 ({FUNNELS[1]} –º–∏–Ω): {funnel_1_count} —Å–æ–æ–±—â.\n"
    debug_info += f"üü† –í–æ—Ä–æ–Ω–∫–∞ 2 ({FUNNELS[2]} –º–∏–Ω): {funnel_2_count} —Å–æ–æ–±—â.\n"  
    debug_info += f"üî¥ –í–æ—Ä–æ–Ω–∫–∞ 3 ({FUNNELS[3]} –º–∏–Ω): {funnel_3_count} —Å–æ–æ–±—â.\n\n"
    
    chats_messages = {}
    for message in all_pending:
        chat_id = message['chat_id']
        if chat_id not in chats_messages:
            chats_messages[chat_id] = []
        chats_messages[chat_id].append(message)
    
    pending_text = f"üìã **–ù–ï–ü–†–û–ß–ò–¢–ê–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø**\n\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_pending)}\n–ß–∞—Ç–æ–≤: {len(chats_messages)}\n"
    pending_text += debug_info
    
    for i, (chat_id, messages) in enumerate(chats_messages.items(), 1):
        chat_display = get_chat_display_name(messages[0])
        oldest = min(msg['timestamp'] for msg in messages)
        time_ago = format_time_ago(oldest)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è —á–∞—Ç–∞
        current_funnel = max([msg.get('current_funnel', 0) for msg in messages])
        funnel_emoji = get_funnel_emoji(current_funnel) if current_funnel > 0 else "‚ö™"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–æ–Ω–∫–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        funnel_details = []
        for msg in messages:
            funnel_num = msg.get('current_funnel', 0)
            funnels_sent = msg.get('funnels_sent', [])
            funnel_details.append(f"{funnel_num}({','.join(map(str, funnels_sent))})")
        
        pending_text += f"{i}. {chat_display} {funnel_emoji}\n"
        pending_text += f"   üìù –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"
        pending_text += f"   ‚è∞ –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ: {time_ago} –Ω–∞–∑–∞–¥\n"
        pending_text += f"   üöÄ –¢–µ–∫—É—â–∞—è –≤–æ—Ä–æ–Ω–∫–∞: {current_funnel}\n"
        pending_text += f"   üîß –°—Ç–∞—Ç—É—Å—ã: {', '.join(funnel_details)}\n\n"
    
    if len(pending_text) > 4000:
        pending_text = pending_text[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
    
    await update.message.reply_text(pending_text, parse_mode='Markdown')

async def clear_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    chat_id = update.message.chat.id
    removed_count = pending_messages_manager.remove_all_chat_messages(chat_id)
    
    if removed_count > 0:
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_id}")
    else:
        await update.message.reply_text("‚úÖ –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

async def clear_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    removed_count = pending_messages_manager.clear_all()
    await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({removed_count} —à—Ç.)")
    logger.info("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

# ========== –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò ==========

async def add_exception_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_exception <ID –∏–ª–∏ @username>")
        return
    
    identifier = context.args[0]
    
    if identifier.isdigit():
        user_id = int(identifier)
        if excluded_users_manager.add_user_id(user_id):
            await update.message.reply_text(f"‚úÖ ID `{user_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è ID `{user_id}` —É–∂–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö")
    else:
        if excluded_users_manager.add_username(identifier):
            await update.message.reply_text(f"‚úÖ Username `{identifier}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è Username `{identifier}` —É–∂–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö")

async def remove_exception_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_exception <ID –∏–ª–∏ @username>")
        return
    
    identifier = context.args[0]
    
    if identifier.isdigit():
        user_id = int(identifier)
        if excluded_users_manager.remove_user_id(user_id):
            await update.message.reply_text(f"‚úÖ ID `{user_id}` —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
        else:
            await update.message.reply_text(f"‚ùå ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö")
    else:
        if excluded_users_manager.remove_username(identifier):
            await update.message.reply_text(f"‚úÖ Username `{identifier}` —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
        else:
            await update.message.reply_text(f"‚ùå Username `{identifier}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö")

async def list_exceptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    excluded_users = excluded_users_manager.get_all_excluded()
    
    if not excluded_users["user_ids"] and not excluded_users["usernames"]:
        await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç")
        return
    
    text = "üë• **–°–ü–ò–°–û–ö –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
    
    if excluded_users["user_ids"]:
        text += "üÜî **–ü–æ ID:**\n"
        for i, user_id in enumerate(excluded_users["user_ids"], 1):
            text += f"{i}. `{user_id}`\n"
        text += "\n"
    
    if excluded_users["usernames"]:
        text += "üë§ **–ü–æ username:**\n"
        for i, username in enumerate(excluded_users["usernames"], 1):
            text += f"{i}. `@{username}`\n"
    
    text += f"\nüìä –í—Å–µ–≥–æ: {len(excluded_users['user_ids'])} ID + {len(excluded_users['usernames'])} username"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def clear_exceptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    excluded_users_manager.clear_all()
    await update.message.reply_text("‚úÖ –í—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ==========

async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.chat.title} - {update.message.text[:50] if update.message.text else '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'}...")
    
    username = update.message.from_user.username
    if is_manager(update.message.from_user.id, username):
        await handle_manager_reply(update, context)
        return
    
    if not should_respond_to_message(update, context):
        logger.info("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    if update.message.chat.type in ['group', 'supergroup']:
        if not is_working_hours():
            chat_id = update.message.chat.id
            replied_key = f'chat_{chat_id}'
            if not flags_manager.has_replied(replied_key):
                await update.message.reply_text(AUTO_REPLY_MESSAGE)
                flags_manager.set_replied(replied_key)
                logger.info(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        else:
            chat_id = update.message.chat.id
            replied_key = f'chat_{chat_id}'
            if flags_manager.has_replied(replied_key):
                flags_manager.clear_replied(replied_key)
            
            chat_title = update.message.chat.title
            username = update.message.from_user.username
            first_name = update.message.from_user.first_name
            message_text = update.message.text or update.message.caption or "[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            
            pending_messages_manager.add_message(
                chat_id=update.message.chat.id,
                user_id=update.message.from_user.id,
                message_text=message_text,
                message_id=update.message.message_id,
                chat_title=chat_title,
                username=username,
                first_name=first_name
            )
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: —á–∞—Ç '{chat_title}', –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id}")
            
            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ - —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            logger.info("üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")

async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update or not update.message:
        return
        
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.message.from_user.id}: {update.message.text[:50] if update.message.text else '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'}...")
    
    username = update.message.from_user.username
    if is_manager(update.message.from_user.id, username):
        await handle_manager_reply(update, context)
        return
    
    if not should_respond_to_message(update, context):
        logger.info("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    if not is_working_hours():
        user_id = update.message.from_user.id
        replied_key = f'user_{user_id}'
        if not flags_manager.has_replied(replied_key):
            await update.message.reply_text(AUTO_REPLY_MESSAGE)
            flags_manager.set_replied(replied_key)
            logger.info(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    else:
        user_id = update.message.from_user.id
        replied_key = f'user_{user_id}'
        if flags_manager.has_replied(replied_key):
            flags_manager.clear_replied(replied_key)
        
        username = update.message.from_user.username
        first_name = update.message.from_user.first_name
        message_text = update.message.text or update.message.caption or "[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
        
        pending_messages_manager.add_message(
            chat_id=update.message.chat.id,
            user_id=update.message.from_user.id,
            message_text=message_text,
            message_id=update.message.message_id,
            username=username,
            first_name=first_name
        )
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name or username or user_id}")
        
        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ - —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        logger.info("üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")
    
    if update:
        logger.error(f"üí• Update object: {update}")
        if update.message:
            logger.error(f"üí• Message info: chat_id={update.message.chat.id}, user_id={update.message.from_user.id if update.message.from_user else 'None'}")
    
    try:
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{context.error}"
            )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main():
    try:
        print("=" * 50)
        print("ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê-–ê–í–¢–û–û–¢–í–ï–¢–ß–ò–ö–ê")
        print("=" * 50)
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∞–º–∏
        application.add_handler(CommandHandler("funnels", funnels_command))
        application.add_handler(CommandHandler("set_funnel_1", set_funnel_1_command))
        application.add_handler(CommandHandler("set_funnel_2", set_funnel_2_command))
        application.add_handler(CommandHandler("set_funnel_3", set_funnel_3_command))
        application.add_handler(CommandHandler("reset_funnels", reset_funnels_command))
        application.add_handler(CommandHandler("force_update_funnels", force_update_funnels_command))
        application.add_handler(CommandHandler("debug_funnels", debug_funnels_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        application.add_handler(CommandHandler("update_notification", update_notification_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
        application.add_handler(CommandHandler("add_exception", add_exception_command))
        application.add_handler(CommandHandler("remove_exception", remove_exception_command))
        application.add_handler(CommandHandler("list_exceptions", list_exceptions_command))
        application.add_handler(CommandHandler("clear_exceptions", clear_exceptions_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        application.add_handler(CommandHandler("clear_chat", clear_chat_command))
        application.add_handler(CommandHandler("clear_all", clear_all_command))
        application.add_handler(CommandHandler("pending", pending_command))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("set_work_chat", set_work_chat_command))
        application.add_handler(CommandHandler("managers", managers_command))
        application.add_handler(CommandHandler("stats", stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.TEXT | filters.CAPTION | filters.PHOTO | filters.Document.ALL, 
            handle_group_message,
            block=False
        ))
        application.add_handler(MessageHandler(
            filters.TEXT | filters.CAPTION | filters.PHOTO | filters.Document.ALL,
            handle_private_message, 
            block=False
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_repeating(check_and_send_new_notification, interval=900, first=10)  # 15 –º–∏–Ω—É—Ç
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)")
            print("üõ°Ô∏è  COOLDOWN –ê–ö–¢–ò–í–ò–†–û–í–ê–ù - –∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫")
            print("üîí –°–¢–†–û–ì–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ - —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–æ—Ä–æ–Ω–∫–∏ 1‚Üí2‚Üí3")
            print("‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–ú–ï–¢–ö–ê - —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        else:
            print("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫
        FUNNELS = funnels_config.get_funnels()
        excluded_users = excluded_users_manager.get_all_excluded()
        total_excluded = len(excluded_users["user_ids"]) + len(excluded_users["usernames"])
        
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–ª–∞–≥–æ–≤: {flags_manager.count_flags()}")
        print(f"üìã –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(pending_messages_manager.get_all_pending_messages())}")
        print(f"üë• –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_excluded}")
        print(f"‚öôÔ∏è –í–æ—Ä–æ–Ω–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {FUNNELS}")
        
        if work_chat_manager.is_work_chat_set():
            print(f"üí¨ –†–∞–±–æ—á–∏–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {work_chat_manager.get_work_chat_id()}")
        else:
            print("‚ö†Ô∏è –†–∞–±–æ—á–∏–π —á–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_work_chat")
        
        print("üîÑ –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–û–ì–û + –û–¢–ü–†–ê–í–ö–ê –ù–û–í–û–ì–û –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç")
        print("‚è≥ COOLDOWN: 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏")
        print("üîí –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨: —Å—Ç—Ä–æ–≥–∞—è 1‚Üí2‚Üí3")
        print("‚úÖ –û–¢–ú–ï–¢–ö–ê: —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        print("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        print("=" * 50)
        
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=False,
            close_loop=False
        )
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
